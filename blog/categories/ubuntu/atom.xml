<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | x2q dot net]]></title>
  <link href="http://www.x2q.net/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://www.x2q.net/"/>
  <updated>2013-05-05T11:15:21+02:00</updated>
  <id>http://www.x2q.net/</id>
  <author>
    <name><![CDATA[x2q]]></name>
    <email><![CDATA[x2q@x2q.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Optimize for speed]]></title>
    <link href="http://www.x2q.net/blog/2013/04/21/ubuntu-optimize-for-speed/"/>
    <updated>2013-04-21T21:20:00+02:00</updated>
    <id>http://www.x2q.net/blog/2013/04/21/ubuntu-optimize-for-speed</id>
    <content type="html"><![CDATA[<p>This easy little guide will help you with simple optimization tips for speeding
up Ubuntu (12.04, 12.10, and 13.04) and other Ubuntu-based systems such as Linux
Mint. The tips come in very handy for those using older computers with low RAM
who need to boost their computer for better speed and performance and if you are
just want a really fast and snappy computer on some regular hardware.</p>

<h2>Removing Ubuntu One client</h2>

<p>Saves >100 MB ram.</p>

<p>The following steps can be followed to completely remove the Ubuntu One client
software.</p>

<p><code>
killall ubuntuone-login ubuntuone-preferences ubuntuone-syncdaemon
sudo rm -rf ~/.local/share/ubuntuone
rm -rf ~/.cache/ubuntuone
rm -rf ~/.config/ubuntuone
rm ~/Ubuntu\ One
</code></p>

<p><code>
sudo apt-get purge ubuntuone-client python-ubuntuone-storage*
</code></p>

<h2>Remove unused Unity lenses</h2>

<p><code>
sudo apt-get purge \
unity-lens-friends \
unity-lens-music \
unity-lens-photos \
unity-lens-shopping \
unity-lens-video \
unity-lens-radios
</code></p>

<h2>Optimize mount options</h2>

<p>Ubuntu use the relatime flag for updating file metadata when files are accessed.
All these updates involve writes to the disk. We can avoid this with the
<code>noatime</code> and <code>nodiratime</code> parameters. This means that access time to files and
directories won't be tracked at all.</p>

<h2>Use tmpfs for /tmp and /var etc.</h2>

<p>Add a section like this tmpfs section to <code>/etc/fstab</code></p>

<p><div><script src='https://gist.github.com/5459544.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h2>Move browser cache to tmpfs</h2>

<p><code>
rm -rf ~/.cache/google-chrome
ln -s /tmp ~/.cache/google-chrome
</code></p>

<h2>Move browser profile to memory using Profile-sync-daemon</h2>

<p><a href="https://wiki.archlinux.org/index.php/Profile-sync-daemon">Profile-sync-daemon
(psd)</a> is a diminutive
pseudo-daemon designed to manage your browser's profile in tmpfs and to
periodically sync it back to your physical disc (HDD/SSD). This is accomplished
via a symlinking step and an innovative use of rsync to maintain back-up and
synchronization between the two. One of the major design goals of psd is a
completely transparent user experience.</p>

<p>Running this daemon is beneficial for two reasons:
* Reduced wear to physical discs
* Speed</p>

<p><code>
sudo add-apt-repository ppa:graysky/utils
sudo apt-get update
sudo apt-get install profile-sync-daemon
</code></p>

<p>Adjust <code>/etc/psd.conf</code> to match your setup and then restart the
Profile-sync-daemon. Your browser(s) needs to be closed before restart of the
Profile-sync-daemon.</p>

<p><code>
sudo /etc/init.d/psd restart
</code></p>

<h2>Remove orphaned libraries</h2>

<p>Over time most Ubuntu/Debian installations acquire packages which are no longer
required - they've just been pulled in to satisfy dependencies of software
you've since removed - deborphan package is probably the simplest way to get rid
of orphaned and unused packages.</p>

<p><code>
sudo apt-get install deborphan
sudo apt-get remove --purge `deborphan`; sudo apt-get autoremove
</code></p>

<h2>Clean browsers cache etc and vacuum browser databases.</h2>

<p><code>
sudo apt-get install bleachbit
bleachbit -c `bleachbit -l | grep cache`
bleachbit -c `bleachbit -l | grep tmp`
bleachbit -c `bleachbit -l | grep vacuum`
</code></p>

<h2>Clean rotated log files</h2>

<p><code>
sudo bleachbit -c system.rotated_logs
</code></p>

<h2>Clean temp and backup files</h2>

<p>First do a dry-run and check that everything is good to go.
<code>
bleachbit -p deepscan.*
</code></p>

<p>and then do the real one
<code>
bleachbit -c deepscan.*
</code></p>

<h2>Disable unnecessary services and applications</h2>

<p>Use BUM, which is a runlevel configuration tool with GUI that allows Ubuntu
users to edit and configure init services that are started when the system is
booting up or restarting. With this tool, you will be displayed with all
running and disabled services in which you can turn them on/off.</p>

<p><code>
sudo apt-get install bum
sudo bum
</code></p>

<p>To remove applications from startup go to <code>Dash</code> > and type <code>Startup Applications</code>.</p>

<p><img src="http://lh3.ggpht.com/-F4MJSlus31U/UXo8S6sRcKI/AAAAAAAAKRc/MbftYfyzMRo/ubuntu-startup-application-preferences.png"></p>

<p>Disable automatic startup of any services that are not needed (or even remove
the package completely).</p>

<h2>Increases performance using zRam</h2>

<p><a href="https://code.google.com/p/compcache/">zRam</a> is a module of the Linux kernel. It
was previously called “compcache”. zRam increases performance by avoiding paging
on disk and instead uses a compressed block device in RAM in which paging takes
place until it is necessary to use the swap space on the hard disk drive. Since
using RAM is faster than using disks, zRam allows Linux to make more use of RAM
when swapping/paging is required, especially on older computers with less RAM
installed.</p>

<p>FYI: <a href="http://www.chromestory.com/2013/03/google-enabling-zram-for-chrome-os-by-default/">Google uses zRAM for Chrome OS</a></p>

<p>Enable zRam on Ubuntu:</p>

<p><code>
sudo apt-get install zram-config
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto install memcached gem on Ubuntu/Debian]]></title>
    <link href="http://www.x2q.net/blog/2013/04/16/howto-install-memcached-gem-on-ubuntu-slash-debian/"/>
    <updated>2013-04-16T15:54:00+02:00</updated>
    <id>http://www.x2q.net/blog/2013/04/16/howto-install-memcached-gem-on-ubuntu-slash-debian</id>
    <content type="html"><![CDATA[<p>Memcached is a general-purpose distributed memory caching system used by many
sites around. It is often used to speed up dynamic database-driven websites by
caching data and objects in RAM to reduce the number of times an external data
source (such as a database or API) must be read. Memcached runs on Unix, Linux,
Windows and Mac OS X.</p>

<p>The <a href="http://rubygems.org/gems/memcached">memcached gem</a> requires the following
development libraries to be installed</p>

<p><code>
sudo apt-get install libmemcached-dev libsasl2-dev
</code></p>

<p>and then</p>

<p><code>
sudo gem install memcached
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto Install Office 2010 using Wine]]></title>
    <link href="http://www.x2q.net/blog/2013/04/10/howto-install-office-2010-using-wine/"/>
    <updated>2013-04-10T19:00:00+02:00</updated>
    <id>http://www.x2q.net/blog/2013/04/10/howto-install-office-2010-using-wine</id>
    <content type="html"><![CDATA[<p>Microsoft Office 2010 is the most recent version of the Microsoft Office
productivity suite. Formerly known as Office 14 in the initial stages of
its beta cycle, it was released to customers in 2010.</p>

<p>This howto assume that you got an ISO image of the installation media.</p>

<p>If you are on Debian/Ubuntu you can install wine, winetricks, and winbind using
<code>
sudo apt-get install wine1.5 winetricks winbind
</code></p>

<p>In order to install you'll need the following native Microsoft Windows libraries (dll files)
<code>
WINEARCH=win32 winetricks riched20 winhttp
</code></p>

<p>Then mount and install
<code>
sudo mount -o loop -o unhide Microsoft-Office-2010.iso /mnt
WINEARCH=win32 wine /mnt/setup.exe
</code></p>

<p>Test Excel
<code>
WINEARCH=win32 wine ~/.wine/drive_c/Program\ Files/Microsoft\ Office/Office14/EXCEL.EXE
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto run Netflix on Ubuntu Linux]]></title>
    <link href="http://www.x2q.net/blog/2013/02/23/howto-run-netflix-on-ubuntu-linux/"/>
    <updated>2013-02-23T22:52:00+01:00</updated>
    <id>http://www.x2q.net/blog/2013/02/23/howto-run-netflix-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>Netflix is finally working on Linux - not native, but with a patched Wine build,
you can now use Netflix under Linux.</p>

<p>For those who are not familiar with Netflix, it is an American provider of
on-demand Internet streaming media available to both North and South America,
the Caribbean, United Kingdom, Ireland, Sweden, Denmark, Norway, Finland.</p>

<h2>How to install</h2>

<pre><code>  $ sudo apt-add-repository ppa:ehoover/compholio
  $ sudo apt-get update
  $ sudo apt-get install netflix-desktop
</code></pre>

<p>The Netflix Desktop package installs all of the components necessary to run Netflix
Watch Instantly under Wine, including the Windows version of Mozilla Firefox and
Microsoft Silverlight v4. The package also includes some convience
settings to integrate Netflix into Firefox in such a way that everything feels
like a native application.</p>

<h2>Run Netflix</h2>

<p>You can launch the Netflix Desktop web app through desktop Dash menu.
The Netflix Desktop application runs in full screen, but you can exit full
screen mode by pressing F11 (just like any other browser).</p>

<h2>Use it for websites that require Silverlight / PlayReady DRM</h2>

<p>Start the Netflix Desktop web app and then press F11 (to exit full screen mode),
then press ALT + v and then the menu occurs, now enable the Menu Bar and
Navigation Toolbar.</p>

<p>Now you are able to navigate to
<a href="http://web.sldrm.video.msn.com/">http://web.sldrm.video.msn.com/</a> or
<a href="http://www.filmstriben.dk/">http://www.filmstriben.dk/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto use Amazon RDS from Heroku]]></title>
    <link href="http://www.x2q.net/blog/2013/01/31/howto-use-amazon-rds-from-heroku/"/>
    <updated>2013-01-31T15:29:00+01:00</updated>
    <id>http://www.x2q.net/blog/2013/01/31/howto-use-amazon-rds-from-heroku</id>
    <content type="html"><![CDATA[<p>Heroku is quite popular for lightweight webservice and like projects. Until
recently Heroku only offered PostgreSQL-based database backend providers, but now Heroku
offers a quite large range of database backend providers; among them Amazon RDS.</p>

<p>This is a short run-down on how I managed to get a Heroku-based application to
connect to a Amazon RDS-based database.</p>

<ul>
<li><p>Install the Amazon RDS command line tools</p>

<pre><code>$ sudo apt-get install rdscli
</code></pre></li>
<li><p>Create a AWS Credential File (~/.aws/AwsCredentials.properties)</p></li>
</ul>


<p><div><script src='https://gist.github.com/4690345.js'></script>
<noscript><pre><code>AWSAccessKeyId=&lt;your-access-key&gt;
AWSSecretKey=&lt;your-secret-key&gt;
</code></pre></noscript></div>
</p>

<ul>
<li><p>Create a RDS db in the us-east region (if not run in this region, Heroku isn't able to connect to it)</p>

<pre><code> $ rds-create-db-instance --db-instance-identifier [name]\
   --allocated-storage 5 \
   --db-instance-class db.m1.small  \
   --engine MySQL5.1 \
   --master-username [user] \
   --master-user-password [pass] \
   --db-name [db-name] \
   --region us-east
   --headers \
   --aws-credential-file ~/.aws/AwsCredentials.properties
</code></pre></li>
<li><p>Now authorize access from your public ip to the Amazon RDS instance</p>

<pre><code> $ rds-authorize-db-security-group-ingress default --cidr-ip 87.1.1.1/32 \
 --aws-credential-file ~/.aws/AwsCredentials.properties
</code></pre></li>
<li><p>Test MySQL connectivy from your local machine to the Amazon RDS instance</p>

<pre><code> $ mysql -u root -p -h &lt;your-amazon-rds-hostname&gt;
</code></pre></li>
<li><p>Now authorize access from the Heroku ip group ranges to the Amazon RDS instance</p>

<pre><code> $ rds-authorize-db-security-group-ingress --db-security-group-name default \
 --ec2-security-group-name default --ec2-security-group-owner-id 098166147350 \
 --aws-credential-file ~/.aws/AwsCredentials.properties
</code></pre></li>
<li><p>Enabled the Amazon RDS plugin using the Heroku console toolbelt</p>

<pre><code>$ heroku addons:add amazon_rds url=mysql://&lt;user&gt;:&lt;pass&gt;@&lt;your-amazon-rds-hostname&gt;/&lt;db-name&gt;
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google Speech API | x2q dot net]]></title>
  <link href="http://www.x2q.net/blog/categories/google-speech-api/atom.xml" rel="self"/>
  <link href="http://www.x2q.net/"/>
  <updated>2013-09-16T14:59:08+02:00</updated>
  <id>http://www.x2q.net/</id>
  <author>
    <name><![CDATA[x2q]]></name>
    <email><![CDATA[x2q@x2q.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use Google Speech API]]></title>
    <link href="http://www.x2q.net/blog/2013/09/16/how-to-use-google-speech-api/"/>
    <updated>2013-09-16T12:24:00+02:00</updated>
    <id>http://www.x2q.net/blog/2013/09/16/how-to-use-google-speech-api</id>
    <content type="html"><![CDATA[<p>I few years ago, Google embedded speech recognition into the <a href="http://www.google.com/chrome">Google
Chrome</a> and the <a href="http://www.chromium.org/">Chromium browser</a>. Both implementation uses a
hidden API, but anyone is able to access and utilize the API as a
Speech To Text service.</p>

<p>The following is a short outline on how to use the Google Speech API.</p>

<h2>Requirements</h2>

<ul>
<li>A <a href="https://xiph.org/flac/">FLAC</a> file that stores the recorded speech or a mp3 file</li>
<li><a href="http://curl.haxx.se/">Curl</a> installed (installed using e.g. <code>sudo apt-get install curl</code>)</li>
</ul>


<h2>Prepare the FLAC</h2>

<p>In case you got your audio stored in a mp3 file or another audio
format, then you'll need sox to convert the file to a FLAC file.</p>

<p>Here is the command line I used to convert the first 15 seconds of an
mp3 file into a FLAC file.</p>

<p><code>
sox ~/speech.mp3 speech.flac trim 0 15
</code></p>

<p>For some reason the Google Speech API only allows FLAC files upto 15
seconds.</p>

<h2>Query the Google Speech To Text API</h2>

<p><code>
curl -v -i -X POST -H "Content-Type:audio/x-flac; rate=16000" \
-T speech.flac \
"https://www.google.com/speech-api/v1/recognize?xjerr=1&amp;client=chromium&amp;lang=en-US&amp;maxresults=10&amp;pfilter=0&amp;xjerr=1"
</code></p>

<p>The result looks like this:</p>

<p>```
{
  "status":0,
  "id":"f2661df1f2661df1f2661df1f2661df1124-2",
  "hypotheses": [</p>

<pre><code>{ "utterance":"this is a test for speech recognition","confidence":0.7654833},
{ "utterance":"this is a fest for speech recognition"}
</code></pre>

<p>  ]
}
```</p>

<h3>Query Parameters</h3>

<p><code>-H "Content-Type:audio/x-flac; rate=16000"</code>
This tells the Speech API that we send a FLAC file with the bitrate of 16000 Hz.</p>

<p><code>-T speech.flac</code>
This attaches the content of the speech.flac file to the HTTP POST</p>

<p><code>client</code>
The client's name you're connecting from. For spoofing purposes,
let's use <code>chromium</code></p>

<p><code>lang</code>
Speech language, for example, <code>da-DK</code> for Danish, or <code>en-US</code>
for U.S. English</p>

<p><code>maxresults</code>
Maximum results to return for the utterance.</p>

<p><code>pfilter</code>
The porn filter ;-). Google (by default) censors the results, leading
to “Please search for ###” (pfilter!=0) instead of “Please search for
s e x” (pfilter=0).</p>

<p><code>xjerr</code>
Tell speech recognition server to return errors as part of the JSON
response and not HTTP error codes</p>
]]></content>
  </entry>
  
</feed>

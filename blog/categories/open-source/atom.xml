<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | x2q dot net]]></title>
  <link href="http://x2q.github.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://x2q.github.com/"/>
  <updated>2012-10-11T15:15:43+02:00</updated>
  <id>http://x2q.github.com/</id>
  <author>
    <name><![CDATA[x2q]]></name>
    <email><![CDATA[x2q@x2q.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Sudo without password]]></title>
    <link href="http://x2q.github.com/blog/2012/10/11/ubuntu-sudo-without-password/"/>
    <updated>2012-10-11T14:44:00+02:00</updated>
    <id>http://x2q.github.com/blog/2012/10/11/ubuntu-sudo-without-password</id>
    <content type="html"><![CDATA[<p>Sudo is a program that allows users to run programs with the security privileges of another user
(normally the superuser, or root).</p>

<p>The <code>/etc/sudoers</code> file allows listed users access to execute a subset of commands while having the privileges of the root user.</p>

<p>Use <code>visudo</code> to edit <code>/etc/sudoers</code>. It can be edited manually, but it is recommended to use <code>visudo</code> to encure that the syntax is correct.</p>

<pre><code>sudo visudo
</code></pre>

<h2>Add Single User</h2>

<p>Add this line at the end (change <code>x2q</code> to your username):</p>

<pre><code>x2q ALL=(ALL) NOPASSWD: ALL
</code></pre>

<h2>Add Group</h2>

<p>Add this line at the end (change <code>%sudo</code> to your group name):</p>

<pre><code>%sudo ALL=NOPASSWD: ALL
</code></pre>

<p>Press Ctrl-X to save your changes, and exit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SummaSummarum on Linux Using Wine]]></title>
    <link href="http://x2q.github.com/blog/2012/06/30/summasummarum-on-linux-using-wine/"/>
    <updated>2012-06-30T13:56:25+02:00</updated>
    <id>http://x2q.github.com/blog/2012/06/30/summasummarum-on-linux-using-wine</id>
    <content type="html"><![CDATA[<p>It works out of the box using Wine 1.5, however since I'm using Ubuntu in English SummaSummarum uses English locales; thousand separators, dates etc.</p>

<p>To change to behavior something like this is required:</p>

<pre><code>LANG=da_DK.UTF-8 /usr/bin/wine SummaSummarum/summa.exe
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Squeezebox and Spotify]]></title>
    <link href="http://x2q.github.com/blog/2010/08/31/squeezebox-spotify/"/>
    <updated>2010-08-31T20:00:29+02:00</updated>
    <id>http://x2q.github.com/blog/2010/08/31/squeezebox-spotify</id>
    <content type="html"><![CDATA[<h2>What is Spotify?</h2>

<p><a href="http://www.spotify.com/">Spotify</a> is an ingenious solution to stream music, so it would be great if it could be used with the <a href="http://www.logitechsqueezebox.com">Squeezebox</a> - and it is actually possible using the Spotify Premium Plugin for Squeezebox Server.
Spotify offers you legal and free access to a huge library of music. All you need to do is create an account and download our streaming music player.</p>

<h2>Scope</h2>

<ul>
<li>For Spotify users with a Premium account</li>
<li>Plays back 320k or 160k streams</li>
<li>Requires a running Squeezebox Server (<a href="http://www.kernel.org/">Linux</a>, <a href="http://www.microsoft.com/WINDOWS">Windows</a> or Mac, could be cloud-based e.g. at <a href="http://amazon.com">Amazon EC2</a>)</li>
<li>Will play back via Squeezebox 2 and later hardware players only</li>
</ul>


<h2>The Install Procedure</h2>

<ol>
<li>Make sure you have a running >7.5.x Squeezebox server</li>
<li>Select the Spotify plugin from the recommended 3rd party plugin list and then click apply as per normal plugin installation</li>
<li>Ensure the server has restarted</li>
<li>Go to the Plugin, Settings page for "Spotify" either via the advanced menu or from the plugin page</li>
<li>Read and agree the Spotify restrictions, then add your username and password to the settings page.</li>
<li>If you refresh the settings page a couple of times you should see that a "helper app" is running and it is logged into Spotify. If not there may be an error to help...</li>
<li>Go to the "radio" menu on one of your hardware players and you should be able to browse and play tracks from Spotify.</li>
</ol>


<h2>Spotify / Linux Adjustment</h2>

<p>The binary files included in the plugin include the Spotify library libspotify and a closed source application built around this. This is 32-bit only so on 64-bit linux you'll need ia32-libs installed. For both 32-bit and 64-bit machines you will need libFLAC.so.8 installed (usually in flac or libflac packages of your distro) and libogg.so.0 (usually in libogg packages of your distro).</p>

<p>I experienced a few problems on Debian lenny, so I copied the shared objects from my Ubuntu). Using ldd to reveal any problems:</p>

<pre><code>x2q@x2q:/var/lib/squeezeboxserver/cache/InstalledPlugins/Plugins/Spotify/Bin/i386-linux$ ldd spotifyd
    linux-gate.so.1 =&gt;  (0xffffe000)
    libspotify.so.4 =&gt; /var/lib/squeezeboxserver/cache/InstalledPlugins/Plugins/Spotify/Bin/i386-linux/libspotify.so.4 (0xf7cc5000)
    libFLAC.so.8 =&gt; /var/lib/squeezeboxserver/cache/InstalledPlugins/Plugins/Spotify/Bin/i386-linux/libFLAC.so.8 (0xf7c75000)
    libc.so.6 =&gt; /lib32/libc.so.6 (0xf7b1b000)
    librt.so.1 =&gt; /lib32/librt.so.1 (0xf7b11000)
    libm.so.6 =&gt; /lib32/libm.so.6 (0xf7aed000)
    libpthread.so.0 =&gt; /lib32/libpthread.so.0 (0xf7ad6000)
    libogg.so.0 =&gt; /var/lib/squeezeboxserver/cache/InstalledPlugins/Plugins/Spotify/Bin/i386-linux/libogg.so.0 (0xf7acf000)
    /lib/ld-linux.so.2 (0xf7fdf000)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Daily Usage and Branching Model]]></title>
    <link href="http://x2q.github.com/blog/2010/07/08/git-daily-usage-branching-model/"/>
    <updated>2010-07-08T19:30:38+02:00</updated>
    <id>http://x2q.github.com/blog/2010/07/08/git-daily-usage-branching-model</id>
    <content type="html"><![CDATA[<h2>What is <a href="http://git-scm.com/">Git</a></h2>

<p>Git is a distributed <a href="http://en.wikipedia.org/wiki/Revision_control">revision control</a> system with an emphasis on speed. Git was initially designed and developed by Linus Torvalds for <a href="http://www.kernel.org/">Linux kernel</a> development.
Every Git working directory is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server.</p>

<p>The central repository holds two main branches and a number of feature branches:</p>

<ul>
<li><strong>master</strong>: The main branch where the source code of HEAD always reflects a state with the latest delivered development changes for the next release. Some would call this the “integration branch”. This is where any automatic nightly builds are built from.</li>
<li><strong>stable</strong>: When the source code in the master branch reaches a stable point and is ready to be released, all of the changes should be merged into the stable branch and then tagged with a release number.</li>
<li><strong>feature_x: Feature X</strong></li>
<li><strong>feature_y: Feature Y</strong></li>
<li><strong>feature_z: Feature Z</strong></li>
</ul>


<p>The feature branches are used to develop new features for the upcoming or a distant future release. When starting development of a feature, the target release in which this feature will be incorporated may well be unknown at that point. The essence of a feature branch is that it exists as long as the feature is in development, but will eventually be merged back into the master branch in order to add the new feature to the upcoming release or discarded in case of a failed experiment.</p>

<h2>Creating a feature branch</h2>

<p>When starting work on a new feature, branch off from the <strong>master</strong> branch.</p>

<pre><code>git checkout -b feature_x master
</code></pre>

<h2>Push feature branch to central repository for sharing</h2>

<pre><code>git checkout feature_x
git push origin feature_x
</code></pre>

<h2>Merge feature into master</h2>

<p>Finished features may be merged into the master branch to definitely add them to the upcoming release:</p>

<pre><code>git checkout master
git merge --no-ff --log feature_x
git branch -d feature_x
git push origin master
</code></pre>

<p>The --no-ff and --log flags cause the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.</p>

<h2>Merge features into stable</h2>

<pre><code>git checkout -b stable --track origin/stable #only needed once
git pull
git merge --no-ff --log master
git push
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View The Contents Of A Certificate Signing Request (CSR)]]></title>
    <link href="http://x2q.github.com/blog/2010/07/04/view-contents-certificate-signing-request-csr/"/>
    <updated>2010-07-04T09:39:56+02:00</updated>
    <id>http://x2q.github.com/blog/2010/07/04/view-contents-certificate-signing-request-csr</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/OpenSSL">OpenSSL</a> is a very powerful <a href="http://en.wikipedia.org/wiki/Cryptography">cryptography</a> utility, perhaps a little too powerful for the average user. With all the different <a href="http://en.wikipedia.org/wiki/Command-line_interface">command line</a> options, it can be a daunting task figuring out how to do exactly what you want to do. Reading the contents of a certificate signing request (<a href="http://en.wikipedia.org/wiki/Certificate_signing_request">CSR</a>) is one of the common tasks that OpenSSL is useful for.</p>

<p><strong>What is a Certificate Signing Requests (CSR)</strong>
Certificate Signing Requests (CSR) are sent to a <a href="http://en.wikipedia.org/wiki/Certificate_authority">Certificate Authority</a> (CA) to be signed. Once signed, a certificate will be returned.</p>

<pre><code>openssl req -text -noout -in host.csr
</code></pre>

<p>```</p>

<pre><code>Certificate:
   Data:
       Version: 1 (0x0)
       Serial Number: 7829 (0x1e95)
       Signature Algorithm: md5WithRSAEncryption
       Issuer: C=ZA, ST=Western Cape, L=Cape Town, O=Thawte Consulting cc,
               OU=Certification Services Division,
               CN=Thawte Server CA/emailAddress=server-certs@thawte.com
       Validity
           Not Before: Jul  9 16:04:02 1998 GMT
           Not After : Jul  9 16:04:02 1999 GMT
       Subject: C=US, ST=Maryland, L=Pasadena, O=Brent Baccala,
                OU=FreeSoft, CN=www.freesoft.org/emailAddress=baccala@freesoft.org
       Subject Public Key Info:
           Public Key Algorithm: rsaEncryption
           RSA Public Key: (1024 bit)
               Modulus (1024 bit):
                   00:b4:31:98:0a:c4:bc:62:c1:88:aa:dc:b0:c8:bb:
                   33:35:19:d5:0c:64:b9:3d:41:b2:96:fc:f3:31:e1:
                   66:36:d0:8e:56:12:44:ba:75:eb:e8:1c:9c:5b:66:
                   70:33:52:14:c9:ec:4f:91:51:70:39:de:53:85:17:
                   16:94:6e:ee:f4:d5:6f:d5:ca:b3:47:5e:1b:0c:7b:
                   c5:cc:2b:6b:c1:90:c3:16:31:0d:bf:7a:c7:47:77:
                   8f:a0:21:c7:4c:d0:16:65:00:c1:0f:d7:b8:80:e3:
                   d2:75:6b:c1:ea:9e:5c:5c:ea:7d:c1:a1:10:bc:b8:
                   e8:35:1c:9e:27:52:7e:41:8f
               Exponent: 65537 (0x10001)
   Signature Algorithm: md5WithRSAEncryption
       93:5f:8f:5f:c5:af:bf:0a:ab:a5:6d:fb:24:5f:b6:59:5d:9d:
       92:2e:4a:1b:8b:ac:7d:99:17:5d:cd:19:f6:ad:ef:63:2f:92:
       ab:2f:4b:cf:0a:13:90:ee:2c:0e:43:03:be:f6:ea:8e:9c:67:
       d0:a2:40:03:f7:ef:6a:15:09:79:a9:46:ed:b7:16:1b:41:72:
       0d:19:aa:ad:dd:9a:df:ab:97:50:65:f5:5e:85:a6:ef:19:d1:
       5a:de:9d:ea:63:cd:cb:cc:6d:5d:01:85:b5:6d:c8:f3:d9:f7:
       8f:0e:fc:ba:1f:34:e9:96:6e:6c:cf:f2:ef:9b:bf:de:b5:22:
       68:9fi
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
